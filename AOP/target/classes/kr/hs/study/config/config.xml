<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/aop
	                    http://www.springframework.org/schema/aop/spring-aop.xsd">

	<bean id="advisor" class="kr.hs.study.advisor.AdvisorClass" />
	<bean id="t1" class="kr.hs.study.beans.TestBean1" />

	<aop:config>
		<aop:aspect ref="advisor">
			<aop:pointcut id="point"
				expression="execution(* method1())" />
			<!-- *:리턴타입 상관없고, 모든패키지, 모든클래스에 있는 method1() -->

			<!-- <aop:before method="beforeMethod" pointcut-ref="point" /> -->
			<!-- method1이 실행되기전에 beforeMethod가 먼저 실행된다. -->


			<!-- <aop:around method="aroundMethod" pointcut-ref="point" /> -->
			<!-- <aop:after-returning method="afterReturningMethod" pointcut-ref="point" 
				/> -->
			<aop:after-throwing method="afterThrowingMethod"
				pointcut-ref="point" throwing="e" />
		</aop:aspect>
	</aop:config>

</beans>